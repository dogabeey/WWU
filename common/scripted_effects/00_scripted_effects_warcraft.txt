#	Example:
#	Example:
# 
#	example_effect = {
#		treasury = 100
#		add_adm_power = 50
#	}
#
#
#	In a script file:
#
#	effect = {
#		example_effect = yes
#	}
#


set_correct_dynasty = {
	if = { limit = { tag = A01 } define_heir = { dynasty = "Wrynn" claim = 75 no_consort_with_heir = yes } } 
	if = { limit = { tag = A28 } define_heir = { dynasty = "Bronzebeard" claim = 75 no_consort_with_heir = yes } } 
	if = { limit = { tag = A90 } define_heir = { dynasty = "Sunstrider" claim = 75 no_consort_with_heir = yes } } 
	if = { limit = { tag = A91 } define_heir = { dynasty = "Sunstrider" claim = 75 no_consort_with_heir = yes } } 
}

teleport_unit_with_any_amount = {
	teleport_units_with_amount_effect = { amount = 10 }
	teleport_units_with_amount_effect = { amount = 9 }
	teleport_units_with_amount_effect = { amount = 8 }
	teleport_units_with_amount_effect = { amount = 7 }
	teleport_units_with_amount_effect = { amount = 6 }
	teleport_units_with_amount_effect = { amount = 5 }
	teleport_units_with_amount_effect = { amount = 4 }
	teleport_units_with_amount_effect = { amount = 3 }
	teleport_units_with_amount_effect = { amount = 2 }
	teleport_units_with_amount_effect = { amount = 1 }
}

teleport_units_with_amount_effect = {
	if = {
		limit = {
			event_target:sender = {
				num_of_units_in_province = {
					who = ROOT
					amount = $amount$
				}
			}
		}
		event_target:sender = {
			kill_units = {
				who = ROOT
				amount = $amount$
			}
			clr_province_flag = sender_province
		}
		event_target:receiver = {
			add_unit_construction = {
				type = infantry
				amount = $amount$
				speed = 0.01
				cost = 0
			}
		}
	}
}

#$against$, $num_of_provinces$, $army_size$, $is_coastal$
send_invasion_force = {
	$against$ = {
		random_owned_province = {
			limit = { 
				NOT = { has_province_flag = was_invaded_by_forces_of@ROOT } 
				[[is_coastal] has_port = $is_coastal$ ]
			}
			set_province_flag = was_invaded_by_forces_of@ROOT
			set_variable = {
				which = army_size_counter
				value = 0
			}
			log = "Invading province 1..." # shows up in log.
			while = {
				limit = {
					NOT = { check_variable = {
						which = army_size_counter
						value = $army_size$
					} }
				}
				log = "Invading province 2..." # Doesn't show up in log.
				change_variable = {
					which = army_size_counter
					value = 1
				}
				infantry = ROOT
			}
			set_variable = {
				which = army_size_counter
				value = 0
			}
		}
		set_variable = {
			which = num_of_provinces_counter
			value = 1
		}
		while = {
			limit = {
				NOT = { check_variable = {
					which = num_of_provinces_counter
					value = $num_of_provinces$
				} }
			}
			change_variable = {
				which = num_of_provinces_counter
				value = 1
			}
			random_owned_province = {
				limit = {
					any_neighbor_province = { has_province_flag = was_invaded_by_forces_of@ROOT }
					[[is_coastal] has_port = $is_coastal$ ]
				}
				set_province_flag = was_invaded_by_forces_of@ROOT
				set_variable = {
					which = army_size_counter
					value = 0
				}
				log = "Invading province..." # Doesn't show up in log.
				while = {
					limit = {
						NOT = { check_variable = {
							which = army_size_counter
							value = $army_size$
						} }
					}
					change_variable = {
						which = army_size_counter
						value = 1
					}
					infantry = ROOT
				}
				set_variable = {
					which = army_size_counter
					value = 0
				}
			}
		}
		set_variable = {
			which = num_of_provinces_counter
			value = 0
		}
		every_owned_province = {
			clr_province_flag = was_invaded_by_forces_of@ROOT
		}
	}
}

form_holy_order_effect = {
	hidden_effect = { add_local_autonomy = 10 }
	custom_tooltip = ADD_AUTONOMY_TOOLTIP
	add_base_tax = 1
	add_base_production = 1
	add_base_manpower = 1
}
abandon_holy_order_effect = {
	hidden_effect = { add_local_autonomy = -10 }
	custom_tooltip = SUB_AUTONOMY_TOOLTIP
	add_base_tax = -1
	add_base_production = -1
	add_base_manpower = -1
	add_unrest = 2
}

discover_home_continent = {
	every_province_including_seas = {
		discover_country = ROOT
	}
}

opinions_joined_alliance = {
    every_country = {
        limit = {
            is_subject_of_type = faction_alliance
            NOT = { has_opinion_modifier = { who = ROOT modifier = alliance_alliance } }
        }
        add_opinion = { who = ROOT modifier = alliance_alliance }
    }
    every_country = {
        limit = {
            is_subject_of_type = faction_horde
            NOT = { has_opinion_modifier = { who = ROOT modifier = alliance_horde } }
        }
        add_opinion = { who = ROOT modifier = alliance_horde }
    }
}

opinions_joined_horde = {
            every_country = {
                limit = {
                    is_subject_of_type = faction_alliance
                    NOT = { has_opinion_modifier = { who = ROOT modifier = horde_alliance } }
                }
                add_opinion = { who = ROOT modifier = horde_alliance }
            }
            every_country = {
                limit = {
                    is_subject_of_type = faction_horde
                    NOT = { has_opinion_modifier = { who = ROOT modifier = horde_horde } }
                }
                add_opinion = { who = ROOT modifier = horde_horde }
            }
}

opinions_left_alliance = {
            every_country = {
                limit = {
                    is_subject_of_type = faction_alliance
                    has_opinion_modifier = { who = ROOT modifier = alliance_alliance }
                }
                remove_opinion = { who = ROOT modifier = alliance_alliance }
            }
            every_country = {
                limit = {
                    is_subject_of_type = faction_alliance
                    reverse_has_opinion_modifier = { who = ROOT modifier = alliance_alliance }
                }
                reverse_remove_opinion = { who = ROOT modifier = alliance_alliance }
            }
            every_country = {
                limit = {
                    is_subject_of_type = faction_horde
                    has_opinion_modifier = { who = ROOT modifier = alliance_horde }
                }
                remove_opinion = { who = ROOT modifier = alliance_horde }
            }
            every_country = {
                limit = {
                    is_subject_of_type = faction_horde
                    reverse_has_opinion_modifier = { who = ROOT modifier = alliance_horde }
                }
                reverse_remove_opinion = { who = ROOT modifier = alliance_horde }
            }
}

opinions_left_horde = {
            every_country = {
                limit = {
                    is_subject_of_type = faction_alliance
                    has_opinion_modifier = { who = ROOT modifier = horde_alliance }
                }
                remove_opinion = { who = ROOT modifier = horde_alliance }
            }
            every_country = {
                limit = {
                    is_subject_of_type = faction_alliance
                    reverse_has_opinion_modifier = { who = ROOT modifier = horde_alliance }
                }
                reverse_remove_opinion = { who = ROOT modifier = horde_alliance }
            }
            every_country = {
                limit = {
                    is_subject_of_type = faction_horde
                    has_opinion_modifier = { who = ROOT modifier = horde_horde }
                }
                remove_opinion = { who = ROOT modifier = horde_horde }
            }
            every_country = {
                limit = {
                    is_subject_of_type = faction_horde
                    reverse_has_opinion_modifier = { who = ROOT modifier = horde_horde }
                }
                reverse_remove_opinion = { who = ROOT modifier = horde_horde }
            }
}

## ALLIANCE - HORDE FACTIONS
# These effects are used on_startup at on_actions file. Triggers used are set in scripted_triggers which lets game know which nations are Alliance, Horde and their respective leaders by age.
set_faction_conflict = {
	if = {
		limit = {
			historical_conflict_times = yes
		}
		#First leaders join
		
		#Then rest follows
		every_country = {
			limit = {
				historical_alliance = yes
			}
			random_country = {
				limit = { historical_alliance_head = yes }
				add_country_modifier = { 
					name = alliance_head
					duration = -1
				}
				create_subject = {
					subject_type = faction_alliance
					subject = PREV
				}
			}
		}
		every_country = {
			limit = {
				historical_horde = yes
			}
			random_country = {
				limit = { historical_horde_head = yes }
				add_country_modifier = { 
					name = horde_head
					duration = -1
				}
				create_subject = {
					subject_type = faction_horde
					subject = PREV
				}
			}
		}
		
	}
}

save_dominant_non_accepted_culture_as = {
	# every_owned_province = {
		# limit = {
			# OR = {
				# accepted_culture = ROOT
				# culture = ROOT
			# }
		# }
		# set_province_flag = temp_province_of@ROOT
		# cede_province = XXX
	# }
	# export_to_variable = {
		# variable_name = $variable_name$
		# value = dominant_culture
	# }
	# every_province = {
		# limit = {
			# has_province_flag = temp_province_of@ROOT
		# }
		# cede_province = ROOT
	# }
		
	every_owned_province = {
		limit = {
			has_owner_culture = no
			has_owner_accepted_culture = no
			is_state_core = PREV
			NOT = { has_province_flag = check }
		}
		save_event_target_as = check
		export_to_variable = { which = devnum value = development }
		PREV = {
			every_owned_province = {
				limit = {
					is_state_core = PREV
					culture = event_target:check
					NOT = { province_id = event_target:check }
				}
				set_province_flag = check
				export_to_variable = { which = devnum value = development }
				event_target:check = {
					change_variable = { which = devnum which = PREV }
				}
			}
		}
		if = {
			limit = {
				check_variable = { which = devnum which = event_target:second_highest_culture }
			}
			save_event_target_as = second_highest_culture
		}
	}
	every_owned_province = {
		clr_province_flag = check
		set_variable = { which = devnum value = 0 }
	}
	
	event_target:second_highest_culture = {
		export_to_variable = {
			which = $variable_name$
			value = culture
		}
		owner = {
			set_variable = {
				which = $variable_name$
				which = PREV
			}
		}
	}
}