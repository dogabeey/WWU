#When adding effects directly in on_actions always consider if it would be best to do so through a scripted effect. on_actions with a lot of script in them are harder to get an overview of.

# country
on_startup = {
    events = {
        wwu_setup.1    # Global
        wwu_setup.2    # Country
	}
}

# country
on_religion_change = {
	#log = "[Root.GetName]: Triggered religion_change"
    
	if = {
		limit = {
			has_heir = yes
		}
		set_heir_religion = ROOT
	}
	if = {
		limit = {
			has_regency = no
		}
		set_ruler_religion = ROOT
	}
	if = {
		limit = {
			has_dlc = "Rights of Man"
			has_consort = yes
		}
		set_consort_religion = ROOT
	}
    add_country_modifier = {
		name = recently_changed_religion_dummy
		duration = 10
		hidden = yes
	}
    
	events = {
		#propagate_religion_events.7 #Propagated Country is now Muslim
	}
}

# country.
on_secondary_religion_change = {
	#log = "[Root.GetName]: Triggered secondary_religion_change"
}

# country. Spawned when Enforcing Rebel Demands through a Support Rebels-war.
on_enforce_rebel_demands = {
	#log = "[Root.GetName]: Triggered enforce_rebel_demands"
	# ROOT = The winning country
	# FROM = The loosing country
	set_country_flag = helped_rebels_win_war
}

# country
on_colonial_liberation = {
	#log = "[Root.GetName]: Triggered colonial_liberation"
	country_event = { id = colonial_nation.90 days = 1 }
}

# country
on_colonial_reintegration = {
	#log = "[Root.GetName]: Triggered colonial_reintegration"
	events = {
		colonial_nation.91
	}
}

# country
on_peace_actor = {
	#log = "[Root.GetName]: Triggered peace_actor"
	events = {
	}
}

# country
on_peace_recipient = {
	#log = "[Root.GetName]: Triggered peace_recipient"
	events = {
	}
}

# country
# root = winning country, from = loser country
on_war_won = {
	#log = "[Root.GetName]: Triggered war_won"
	ROOT = { 
		country_event = { id = tributary_events.32 }
		change_variable = {
			which = war_won
			value = 1
		}
	}
	events = {
		on_action_special.2
	}
}

# country
# root = loser country, from = winner country
on_war_lost = {
	#log = "[Root.GetName]: Triggered war_lost"
	ROOT = { country_event = { id = tributary_events.32 } }
	change_variable = {
		which = war_lost
		value = 1
	}
	events = {
		on_action_special.2
	}
}

# country
# root = winning country, from = loser country
on_battle_won_country = {
	#log = "[Root.GetName]: Triggered battle_won_country"
	random_events = {
		12 = 0
		1 = chaos.4
		1 = chaos.5
		1 = chaos.6
	}
	if = {
		limit = {
			has_country_modifier = hegemonic_victory
			FROM = { tag = REB }
		}
		change_variable = {
			which = rebels_suppressed
			value = 1
		}
	}
}

# country
# root = loser country, from = winner country
on_battle_lost_country = {
	#log = "[Root.GetName]: Triggered battle_lost_country"
	# if = {
		# limit = {
			# was_faction_leaders_war = yes
		# }
		# overlord = {
			# reverse_add_opinion = {
				# who = PREV
				# modifier = battle_is_lost
			# }
		# }
	# }
	events = {
        rise_of_the_horde.6
    }
	random_events = {
		12 = 0
		2 = friendship_events.1 #Historical Friendship Broken
		1 = chaos.7
		1 = chaos.8
		1 = chaos.9
	}
	
}

# province
# root = location, from = loser country
on_battle_won_province = {
	#log = "[Root.GetName]: Triggered battle_won_province"
}

#Unit Scope OnAction for Battle Won
on_battle_won_unit = {
	#log = "[Root.GetName]: Triggered battle_won_unit"
	if = {
		limit = {
			unit_owner = { ai = no } #Scopes to Unit Owner from Unit Scope
			general_with_steam_name = yes #Unit Scope Trigger
		}
		unit_owner = { set_country_flag = general_with_steam_name_won_battle }
	}
}

# #Unit Scope OnAction for Battle Lost
on_battle_lost_unit = {
	#log = "[Root.GetName]: Triggered battle_lost_unit"
}

# province
# root = location, from = country doing it
on_added_to_trade_company ={

}

# province
# root = location, from = country doing it
on_removed_from_company ={

}

# province
# root = location, from = country doing it
on_company_formed ={

}

# province
# root = location, from = country doing it
on_company_disolved ={

}

# province
# root = location, from = winner country
on_battle_lost_province = {
	#log = "[Root.GetName]: Triggered battle_lost_province"
}

# country
# root = winning country, from = location
on_siege_won_country = {
	#log = "[Root.GetName]: Triggered siege_won_country"
}

# country
# root = losing country, from = location
on_siege_lost_country = {
	#log = "[Root.GetName]: Triggered siege_lost_country"
	if = {
		limit = {
			was_faction_leaders_war = yes
		}
		overlord = {
			reverse_add_opinion = {
				who = PREV
				modifier = city_is_fallen
			}
		}
	}
}

# province
# root = location, from = losing country
on_siege_won_province = {
	#log = "[Root.GetName]: Triggered siege_won_province"
}

# province
# root = location, from = winning country
on_siege_lost_province =  {
}

# province
# root = location, from = country that abandons colony
# Fired right before the colony is abandoned.
on_abandon_colony = {
	#log = "[Root.GetName]: Triggered abandon_colony"
}

# OBS: Consider that the following on_actions can be called for Personal Union juniors as well.
# country
on_new_monarch = {
	#log = "[Root.GetName]: Triggered new_monarch"

	if = {
		limit = {
			has_reform = hereditary_monarchy_reform
		}
		set_country_flag = country_has_no_heir
		##log = "[Root.Monarch.GetName] is no longer a heir and became monarch."
	}
	
    events = {
        wow_government.1    # The Education of [Root.Monarch.GetName]
        wow_government.2    # Ascension of [Root.Monarch.GetName]
		9492
		611
    }
	random_events = {
		1000 = 0
		50 = dynastic_events.4
		250 = 611
	}
	
}

on_new_consort = {
	#log = "[Root.GetName]: Triggered new_consort"
	country_event = { id = consort_events.2 }
	
	if = {
		limit = { has_ruler_flag = had_10_years_anniversary }
		clr_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = had_20_years_anniversary }
		clr_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_ruler_flag = consort_had_affection_of_ruler }
		clr_ruler_flag = consort_had_affection_of_ruler
	}
}

# country
on_monarch_death = {
	#log = "[Root.GetName]: Triggered monarch_death"
	events = {
		loa.2 # Remove old loa's influence
	}
	
}

# country
on_regent = {
	#log = "[Root.GetName]: Triggered regent"
	events = {
		tribal_succession.1	# harsh anti-tribals.
	}
}

# country
on_new_term_election = {
	#log = "[Root.GetName]: Triggered new_term_election"
	events = {
		wwu_government.2    # On Term Election
	}
}

# country
on_death_election = {
	#log = "[Root.GetName]: Triggered death_election"
	if = {
		limit = {
			government = pirate
		}
		set_country_flag = pirate_death_election
		country_event = { id = pirates.1 }
	}
	events = {
		wwu_government.1    # On Death Election
        wwu_government.5    # Lottery Election
	}
}

# country
on_death_foreign_slave_ruler = {
	#log = "[Root.GetName]: Triggered death_foreign_slave_ruler"
	events = {
		factions.3
		council_events.1
	}
}

# country
on_replace_governor = {
	#log = "[Root.GetName]: Triggered replace_governor"
	events = {
		wwu_government.3    # On Replace Governor
	}
}


# country
on_bankruptcy = {
	#log = "[Root.GetName]: Triggered bankruptcy"
}

# country (country annexing, root = target)
on_diplomatic_annex = {
	#log = "[Root.GetName]: Triggered diplomatic_annex"
	events = {
		610
		factions.7
		factions.8
	}
	change_variable = {
		which = diplo_annexed_nation
		value = 1
	}
}

# country
on_heir_death = {
	#log = "[Root.GetName]: Triggered heir_death"
	if = {
		limit = { has_country_flag = heir_dip_education }
		clr_ruler_flag = heir_dip_education
	}
	if = {
		limit = { has_country_flag = heir_mil_education }
		clr_ruler_flag = heir_mil_education
	}
	if = {
		limit = { has_country_flag = heir_adm_education }
		clr_ruler_flag = heir_adm_education
	}
	if = {
		limit = { has_ruler_flag = well_advised_tutored_heir }
		clr_ruler_flag = well_advised_tutored_heir
	}
	if = {
		limit = { has_ruler_flag = heir_went_on_grand_tour }
		clr_ruler_flag = heir_went_on_grand_tour
	}
	if = {
		limit = { has_country_flag = albrecht_achilles_flag }
		clr_country_flag = albrecht_achilles_flag #Death of original Albrecht Achilles
	}
	if = {
		limit = { has_ruler_flag = sancaga_cikma }
		clr_ruler_flag = sancaga_cikma
		every_owned_province = {
			limit = {
				has_province_modifier = heir_in_training
			}
			remove_province_modifier = heir_in_training
		}
	}
	if = {
		limit = { has_ruler_flag = returned_from_sancaga_sikma_province }
		clr_ruler_flag = returned_from_sancaga_sikma_province
	}
	if = {
		limit = {
			has_reform = hereditary_monarchy_reform
		}
		set_country_flag = country_has_no_heir
		##log = "[Root.GetName]'s heir died"
	}
}

# country
on_queen_death = {
	#log = "[Root.GetName]: Triggered queen_death"

	if = {
		limit = { has_consort_flag = 10_years_anniversary }
		set_ruler_flag = had_10_years_anniversary
	}
	if = {
		limit = { has_consort_flag = 20_years_anniversary }
		set_ruler_flag = had_20_years_anniversary
	}
	if = {
		limit = { has_consort_flag = consort_has_affection_of_ruler }
		set_ruler_flag = consort_had_affection_of_ruler
	}

	if = {
		limit = {
			has_regency = no
			NOT = { has_ruler_flag = widow_widower }
		}
		set_ruler_flag = widow_widower
	}
	if = {
		limit = { has_consort_regency = no }
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = { has_ruler_flag = accepted_help_from_spouses_family }
		clr_ruler_flag = accepted_help_from_spouses_family
	}
	if = {
		limit = { has_ruler_flag = helped_spouses_family }
		clr_ruler_flag = helped_spouses_family
	}
	if = {
		limit = { has_ruler_flag = refused_to_help_spouses_family }
		clr_ruler_flag = refused_to_help_spouses_family
	}
	if = {
		limit = { has_ruler_flag = lowborn_consort }
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
	if = {
		limit = { has_ruler_flag = lowborn_consort }
		clr_ruler_flag = lowborn_consort
	}
	if = {
		limit = { has_country_modifier = consort_adm_advice }
		remove_country_modifier = consort_adm_advice
	}
	if = {
		limit = { has_country_modifier = consort_dip_advice }
		remove_country_modifier = consort_dip_advice
	}
	if = {
		limit = { has_country_modifier = consort_mil_advice }
		remove_country_modifier = consort_mil_advice
	}
	if = {
		limit = { has_country_modifier = without_spouse_advice }
		remove_country_modifier = without_spouse_advice
	}
	if = {
		limit = { has_ruler_modifier = affectionate_royal_couple }
		remove_country_modifier = affectionate_royal_couple
	}
	clr_ruler_flag = marriage_length
}

# country
on_new_heir = {
	#log = "[Root.GetName]: Triggered new_heir"
	if = {
		limit = {
			has_reform = hereditary_monarchy_reform
		}
		clr_country_flag = country_has_no_heir
		##log = "[Root.GetName] has a new heir."
	}
}

# country
on_weak_heir_claim = {
	#log = "[Root.GetName]: Triggered weak_heir_claim"
	events = {
				# Pretenders rise up
	}
}

# country : no heir in theocracy
on_heir_needed_theocracy = {
	#log = "[Root.GetName]: Triggered heir_needed_theocracy"
	events = {
		theocracy.1
	}
}

# Emperor from same dynasty
on_successive_emperor = {
	#log = "[Root.GetName]: Triggered successive_emperor"
}

# HRE Prince released by the emperor
on_released_hre_member = {
	#log = "[Root.GetName]: Triggered released_hre_member"
}

# HRE Prince converts to non-Emperor religion
on_hre_member_false_religion = {
	#log = "[Root.GetName]: Triggered hre_member_false_religion"
}

# HRE Prince converts to Emperor religion
on_hre_member_true_religion = {
	#log = "[Root.GetName]: Triggered hre_member_true_religion"
}

# Emperor wins HRE defensive war
on_hre_wins_defensive_war = {
	#log = "[Root.GetName]: Triggered hre_wins_defensive_war"
}

# HRE member annexed by non-HRE country
on_hre_member_annexed = {
	#log = "[Root.GetName]: Triggered hre_member_annexed"
}

# HRE member released from non-HRE vassalage
on_hre_released_vassal = {
	#log = "[Root.GetName]: Triggered hre_released_vassal"
}

# HRE member transferred from non-HRE vassalage to Emperor
on_hre_transfered_vassal = {
	#log = "[Root.GetName]: Triggered hre_transfered_vassal"
}

# Emperor coming to the defense of a HRE member
on_hre_defense = {
	#log = "[Root.GetName]: Triggered hre_defense"
}

# Emperor NOT coming to the defense of a HRE member
on_hre_non_defense = {
	#log = "[Root.GetName]: Triggered hre_non_defense"
}

# HRE Member takes a HRE province from an outs100e country in a peace (province scope)
on_hre_province_reconquest = {
	#log = "[Root.GetName]: Triggered hre_province_reconquest"
}

on_lock_hre_religion = {
	#log = "[Root.GetName]: Triggered lock_hre_religion"
}

on_change_hre_religion = {
	#log = "[Root.GetName]: Triggered change_hre_religion"
}

on_hre_religion_white_peace = {
	#log = "[Root.GetName]: Triggered hre_religion_white_peace"
}

# When a non-native changes government type
on_government_change = {
	#log = "[Root.GetName]: Triggered government_change"
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = domain_of_spouses_family
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = domain_of_spouses_family }
			remove_province_modifier = domain_of_spouses_family
		}
	}
	if = {
		limit = {
			NOT = { government = monarchy }
			any_owned_province = {
				has_province_modifier = home_of_consort
			}
		}
		random_owned_province = {
			limit = { has_province_modifier = home_of_consort }
			remove_province_modifier = home_of_consort
		}
	}
}

# When a native changes government after filling all their advancement groups.
on_native_change_government = {
	#log = "[Root.GetName]: Triggered native_change_government"
}

# Nation is integrated after being in union
on_integrate = {
	#log = "[Root.GetName]: Triggered integrate"
	events = {
		610
	}
}

# Nation annexed.
# FROM is the nation being annexed
on_annexed = {
	#log = "[Root.GetName]: Triggered annexed"
	events = {
		factions.7
		factions.8
	}
	change_variable = {
		which = annexed_nation
		value = 1
	}
}

# When the chinese empire gets dismantled (e.g. when the emperor is annexed)
# FROM = Emperor, ROOT = Current Nation
on_chinese_empire_dismantled = {
	#log = "[Root.GetName]: Triggered chinese_empire_dismantled"
	events = {

	}
}

# When a nation gains the Mandate of Heaven (becomes the Emperor of China)
# FROM = Old Emperor, ROOT = New Emperor
on_mandate_of_heaven_gained = {
	#log = "[Root.GetName]: Triggered mandate_of_heaven_gained"
	if = {
		limit = {
			OR = {
				NOT = { government = monarchy }
				government = tribal
			}
		}
		change_government = monarchy
	}
	set_mandate = 60
	if = {
		limit = {
			has_country_modifier = lost_mandate_of_heaven
		}
		remove_country_modifier = lost_mandate_of_heaven
	}
}

# When a nation loses the Mandate of Heaven
# FROM = New Emperor, ROOT = Old Emperor
on_mandate_of_heaven_lost = {
	#log = "[Root.GetName]: Triggered mandate_of_heaven_lost"
    
	add_country_modifier = {
		name = lost_mandate_of_heaven
		duration = 7300	# 20 years
	}
	add_stability = -2
}

on_dismantle_revolution = {
	#log = "[Root.GetName]: Triggered dismantle_revolution"
	if = {
		limit = {
			has_dlc = "Dharma"
		}
		change_government = monarchy
	}
	else = {
		set_legacy_government = despotic_monarchy
	}
	kill_ruler = yes
	set_revolution_target = ---
	if = {
		limit = { has_heir = yes }
		kill_heir = yes
	}
}

# province
on_adm_development = {
	#log = "[Root.GetName]: Triggered adm_development"
}

# province
on_dip_development = {
	#log = "[Root.GetName]: Triggered dip_development"
}

# province
on_mil_development = {
	#log = "[Root.GetName]: Triggered mil_development"
}

on_overextension_pulse = {
	#log = "[Root.GetName]: Triggered overextension_pulse"
	random_events = {
		100 = overextension.1
		100 = overextension.2
		100 = overextension.3
		100 = overextension.4
		100 = overextension.5
		100 = overextension.6
		100 = overextension.7
		100 = overextension.8
		100 = overextension.9
		100 = overextension.10
	}
}


on_colonial_pulse = {
	#log = "[Root.GetName]: Triggered colonial_pulse"
}

on_siberian_pulse = {
	#log = "[Root.GetName]: Triggered siberian_pulse"
}


# country random events
on_bi_yearly_pulse = {
	#log = "[Root.GetName]: Triggered bi_yearly_pulse"
	
	swap_non_generic_missions = yes # Update missions
    
	random_events = {
		# randomevents.txt

		#Streltsy Events
		125 = streltsy_events.1
		125 = streltsy_events.3
		125 = streltsy_events.4
		125 = streltsy_events.5
		# Trade Specific
		100 = trade.1
		100 = trade.2
		100 = trade.3
		100 = trade.4
		100 = trade.5
		100 = trade.6
		100 = trade.7
		100 = trade.8
		100 = trade.9
		100 = trade.10
		100 = trade.11
		100 = trade.12
		# Trade League Events
		100 = trade_league.1
		100 = trade_league.2
		100 = trade_league.3
		100 = trade_league.4
		100 = trade_league.7
		100 = trade_league.8
		100 = trade_league.9
		100 = trade_league.10
		100 = trade_league.11
		100 = trade_league.12
		100 = trade_league.13
		100 = trade_league.14

		# Refoms, when having parliaments.
		100 = reforms.1
		100 = reforms.2
		100 = reforms.3
		100 = reforms.4

		100 = randomeventsstapehordes.1
		100 = randomeventsstapehordes.2
		100 = randomeventsstapehordes.3
		100 = randomeventsstapehordes.4
		100 = randomeventsstapehordes.5
		100 = randomeventsstapehordes.6
		100 = randomeventsstapehordes.7
		100 = randomeventsstapehordes.8
		100 = randomeventsstapehordes.13
		100 = randomeventsstapehordes.14
		100 = randomeventsstapehordes.17
		100 = randomeventsstapehordes.18
		100 = randomeventsstapehordes.19
		100 = randomeventsstapehordes.20
		100 = randomeventsstapehordes.21
		100 = randomeventsstapehordes.22
		100 = randomeventsstapehordes.23
		100 = randomeventsstapehordes.24

		# Sailor events
		100 = sailor_event.1
		100 = sailor_event.2
		100 = sailor_event.3
		100 = sailor_event.4
		100 = sailor_event.5

		# Corruption Events
		100 = corruption_event.16
		100 = corruption_event.17
		100 = corruption_event.18
		100 = corruption_event.19
		100 = corruption_event.20



		# Minority Expulsion Events
		100 = expel_minority_events.1
		100 = expel_minority_events.2
		100 = expel_minority_events.3
		100 = expel_minority_events.4
		100 = expel_minority_events.5


		1250 = 0
	}
}

on_bi_yearly_pulse_2 = {
	#log = "[Root.GetName]: Triggered bi_yearly_pulse_2"
	random_events = {
		100 = corruption_event.1
		100 = corruption_event.2
		100 = corruption_event.3
		100 = corruption_event.4
		100 = corruption_event.5
		100 = corruption_event.6
		100 = corruption_event.7
		100 = corruption_event.8
		100 = corruption_event.9
		100 = corruption_event.10
		200 = corruption_event.11
		200 = corruption_event.12
		200 = corruption_event.13
		200 = corruption_event.14
		200 = corruption_event.15

		4000 = 0
	}
}

on_bi_yearly_pulse_3 = {
	#log = "[Root.GetName]: Triggered bi_yearly_pulse_3"
	
    random_events = {
        # Agenda from the Estates
		1000 = estate_system.1
        
		3000 = 0
	}
}

on_bi_yearly_pulse_4 = {
	#log = "[Root.GetName]: Triggered bi_yearly_pulse_4"
}

# country random events
on_thri_yearly_pulse = {
	#log = "[Root.GetName]: Triggered thri_yearly_pulse"
	random_events = {
		# Republics
		100 = republics.4
		100 = republics.5
		100 = republics.6
		100 = republics.7
		100 = republics.8
		100 = republics.9
		100 = republics.10
		100 = republics.11
		100 = republics.12
		100 = republics.13
		100 = republics.14
		100 = republics.15
		100 = republics.16
		100 = republics.17
		100 = republics.18
		100 = republics.19
		100 = republics.20
		100 = republics.21
		100 = republics.22
		100 = republics.23
		100 = republics.24
		100 = republics.25
		100 = republics.26
		100 = republics.27
		100 = republics.28
		100 = republics.29
		100 = republics.30
		100 = republics.31
		100 = republics.32
		100 = republics.33
		100 = republics.34
		100 = republics.35
		100 = republics.36
		100 = republics.37
		100 = republics.38
		100 = republics.39
		100 = republics.40
		100 = republics.41
		100 = republics.42
		100 = republics.43

		# China
		75 = meritocracy_events.1
		75 = meritocracy_events.2
		75 = meritocracy_events.3
		75 = meritocracy_events.4
		75 = meritocracy_events.5
		
		# Random Events
		100 = wwu_random_events.1
		100 = wwu_random_events.2
		100 = wwu_random_events.3
		100 = wwu_random_events.4
		100 = wwu_random_events.5
		100 = wwu_random_events.6
		100 = wwu_random_events.7
		100 = wwu_random_events.8
		100 = wwu_random_events.9
		100 = wwu_random_events.10
		100 = wwu_random_events.11
		100 = wwu_random_events.12
		100 = wwu_random_events.13
		100 = wwu_random_events.14
		100 = wwu_random_events.15
		100 = wwu_random_events.16
		100 = wwu_random_events.17
		100 = wwu_random_events.18
		100 = wwu_random_events.19
		100 = wwu_random_events.20
		100 = wwu_random_events.21
		100 = wwu_random_events.22
		100 = wwu_random_events.23
		100 = wwu_random_events.24
		100 = wwu_random_events.25
		100 = wwu_random_events.26
		100 = wwu_random_events.27
		100 = wwu_random_events.28
		100 = wwu_random_events.29
		100 = wwu_random_events.30
		100 = wwu_random_events.31
		100 = wwu_random_events.32
		100 = wwu_random_events.33
		100 = wwu_random_events.34
		100 = wwu_random_events.35
		100 = wwu_random_events.36
		100 = wwu_random_events.37
		100 = wwu_random_events.38
		100 = wwu_random_events.39
		100 = wwu_random_events.40
		100 = wwu_random_events.41
		100 = wwu_random_events.42
		100 = wwu_random_events.43
		100 = wwu_random_events.44
		100 = wwu_random_events.45
		100 = wwu_random_events.46
		100 = wwu_random_events.47
		100 = wwu_random_events.48
		100 = wwu_random_events.49
		100 = wwu_random_events.50
		100 = wwu_random_events.51
		100 = wwu_random_events.52
		100 = wwu_random_events.53
		100 = wwu_random_events.54
		100 = wwu_random_events.55
		100 = wwu_random_events.56
		100 = wwu_random_events.57
		100 = wwu_random_events.58
		100 = wwu_random_events.59
		100 = wwu_random_events.60
		100 = wwu_random_events.61
		100 = wwu_random_events.62
		100 = wwu_random_events.63
		100 = wwu_random_events.64
		100 = wwu_random_events.65
		100 = wwu_random_events.66
		100 = wwu_random_events.67

		
		1000 = 0
	}
}

on_thri_yearly_pulse_2 = {
	#log = "[Root.GetName]: Triggered thri_yearly_pulse_2"
}

on_thri_yearly_pulse_3 = {
	#log = "[Root.GetName]: Triggered thri_yearly_pulse_3"
	random_events = {
		# Subject Interactions
		50 = subject_interaction_events.1
		50 = subject_interaction_events.4
		50 = subject_interaction_events.5
		50 = subject_interaction_events.6
		50 = subject_interaction_events.7
		50 = subject_interaction_events.9
		50 = subject_interaction_events.11
		50 = subject_interaction_events.14
		50 = subject_interaction_events.15
		50 = subject_interaction_events.17
		50 = subject_interaction_events.18
		50 = subject_interaction_events.19
		50 = subject_interaction_events.20
		50 = subject_interaction_events.21
		50 = subject_interaction_events.22
		50 = subject_interaction_events.23
		50 = subject_interaction_events.24
		50 = subject_interaction_events.25
		50 = subject_interaction_events.26
		50 = subject_interaction_events.27
		50 = subject_interaction_events.29
		50 = subject_interaction_events.30
		50 = subject_interaction_events.31
		50 = subject_interaction_events.32
		50 = subject_interaction_events.34
		50 = subject_interaction_events.35
		50 = subject_interaction_events.36
		50 = subject_interaction_events.38
		50 = subject_interaction_events.40
		50 = subject_interaction_events.43
		75 = tributary_events.1
		75 = tributary_events.2
		75 = tributary_events.3
		75 = tributary_events.4
		75 = tributary_events.5
		75 = tributary_events.6
		75 = tributary_events.7
		75 = tributary_events.8
		75 = tributary_events.9
		75 = tributary_events.10
		75 = tributary_events.13
		75 = tributary_events.16
		75 = tributary_events.17
		75 = tributary_events.18
		75 = tributary_events.19
		75 = tributary_events.23
		75 = tributary_events.24
		75 = tributary_events.26
		75 = tributary_events.25
		75 = tributary_events.27

		1000 = 0
	}
}

on_thri_yearly_pulse_4 = {
	#log = "[Root.GetName]: Triggered thri_yearly_pulse_4"
}

on_four_year_pulse = {
	#log = "[Root.GetName]: Triggered four_year_pulse"
	random_events = {
		# Colonial Nations
		100 = colonial_nation.1
		100 = colonial_nation.4
		100 = colonial_nation.10
		100 = colonial_nation.12
		100 = colonial_nation.14
		100 = colonial_nation.77
		100 = colonial_nation.100
		100 = colonial_nation.102
		100 = colonial_nation.104
		100 = colonial_nation.106
		100 = colonial_nation.108
		100 = colonial_nation.110
		100 = colonial_nation.112
		100 = colonial_nation.114
		100 = colonial_nation.116
		100 = colonial_nation.118
		100 = colonial_nation.120
		100 = colonial_nation.122
		100 = colonial_nation.124
		100 = colonial_nation.126
		100 = colonial_nation.128
		100 = colonial_nation.130
		100 = colonial_nation.132
		100 = colonial_nation.134
		10 = colonial_nation.140
		10 = colonial_nation.142
		10 = colonial_nation.144
		10 = colonial_nation.146
		10 = colonial_nation.148
		10 = colonial_nation.150
		10 = colonial_nation.152
		10 = colonial_nation.154
		10 = colonial_nation.156
		10 = colonial_nation.158
		10 = colonial_nation.160
		10 = colonial_nation.162
		10 = colonial_nation.164
		10 = colonial_nation.166
		10 = colonial_nation.168
		10 = colonial_nation.170
		10 = colonial_nation.172
		10 = colonial_nation.174
		10 = colonial_nation.176

		# Republic Factions
		100 = republic_factions.2
		100 = republic_factions.5
		100 = republic_factions.7
		100 = republic_factions.9
		100 = republic_factions.10
		100 = republic_factions.12
		100 = republic_factions.13
		100 = republic_factions.14
		100 = republic_factions.15
		100 = republic_factions.16
		100 = republic_factions.17
		100 = republic_factions.18
		100 = republic_factions.19
		100 = republic_factions.20
		100 = republic_factions.22
		100 = republic_factions.23
		100 = republic_factions.24

		# Pirate Factions
		100 = pirates.10
		100 = pirates.11
		100 = pirates.12
		100 = pirates.13
		100 = pirates.14
		100 = pirates.15
		100 = pirates.16
		100 = pirates.17
		100 = pirates.18
		100 = pirates.19

		# Elective Monarchy
		150 = kingdom_of_magic.1
		150 = kingdom_of_magic.2
		25 = kingdom_of_magic.3
		25 = kingdom_of_magic.4
		150 = kingdom_of_magic.6
		150 = kingdom_of_magic.8
		150 = kingdom_of_magic.9
		150 = kingdom_of_magic.10
		150 = kingdom_of_magic.11
		150 = kingdom_of_magic.12
		150 = kingdom_of_magic.14
		150 = kingdom_of_magic.17
		25 = kingdom_of_magic.18

		# Free Cities
		25 = free_cities.3
		25 = free_cities.7
		25 = free_cities.8
		25 = free_cities.10
		25 = free_cities.13
		25 = free_cities.17
		25 = free_cities.19
	}
}

on_four_year_pulse_2 = {
	#log = "[Root.GetName]: Triggered four_year_pulse_2"
}

on_four_year_pulse_3 = {
	#log = "[Root.GetName]: Triggered four_year_pulse_3"
}

on_four_year_pulse_4 = {
	#log = "[Root.GetName]: Triggered four_year_pulse_4"
}

on_five_year_pulse = {
	#log = "[Root.GetName]: Triggered five_year_pulse"
    random_events = {
        10 = wow_ruler.1
        10 = wow_ruler.2
        100 = 0
    }
}


# Estates pulse
on_five_year_pulse_2 = {
}

on_five_year_pulse_3 = {
	#log = "[Root.GetName]: Triggered five_year_pulse_3"
	random_events = {
		# 100 = propagate_religion_events.1
		# 100 = propagate_religion_events.2
		# 100 = propagate_religion_events.3
		# 100 = propagate_religion_events.4
		# 100 = propagate_religion_events.5
		# 100 = propagate_religion_events.6
		# 100 = propagate_religion_events.8
		# 100 = propagate_religion_events.9
		# 100 = propagate_religion_events.10
		#100 = propagate_religion_events.11 #Province event
		1000 = 0
	}
}

on_five_year_pulse_4 = {
	#log = "[Root.GetName]: Triggered five_year_pulse_4"

}

# El Dorado
on_explore_coast = {
	#log = "[Root.GetName]: Triggered explore_coast"
}
on_conquistador_empty = {
	#log = "[Root.GetName]: Triggered conquistador_empty"
}

on_conquistador_native = {
	#log = "[Root.GetName]: Triggered conquistador_native"
}

on_buy_religious_reform = {
	#log = "[Root.GetName]: Triggered buy_religious_reform"
}

on_circumnavigation = {
	#log = "[Root.GetName]: Triggered circumnavigation"
}

on_become_free_city = {
	#log = "[Root.GetName]: Triggered become_free_city"
	events = {
		free_cities.1
	}
}

on_remove_free_city = {
	#log = "[Root.GetName]: Triggered remove_free_city"
	events = {
		free_cities.2
	}
}

on_revoke_estate_land_ai = {
	#log = "[Root.GetName]: Triggered revoke_estate_land_ai" #AI can't handle the rebels atm or perform a gradual revoke, sorry
	add_province_modifier = {
		name = revoked_estate_modifier
		duration = 5475 #15 years
	}
}

on_revoke_estate_land = {
	#log = "[Root.GetName]: Triggered revoke_estate_land"
	add_province_modifier = {
		name = revoked_estate_modifier
		duration = 5475 #15 years
	}
}

on_revoke_estate_land_ai_post = {
	#log = "[Root.GetName]: Triggered revoke_estate_land_ai_post"
	add_local_autonomy = 25
}
on_revoke_estate_land_post = {
	#log = "[Root.GetName]: Triggered revoke_estate_land_post"
	add_local_autonomy = 25
}

on_grant_estate_land = {
	#log = "[Root.GetName]: Triggered grant_estate_land"
	if = {
		limit = {
			has_province_modifier = revoked_estate_modifier
		}
		remove_province_modifier = revoked_estate_modifier
	}
}

on_death_has_harem = {
	#log = "[Root.GetName]: Triggered death_has_harem"
}

on_select_heir_from_harem = {
	#log = "[Root.GetName]: Triggered select_heir_from_harem"
}

on_fetishist_cult_change = {
	#log = "[Root.GetName]: Triggered fetishist_cult_change"
}

# country
on_gain_great_power_status = {
	#log = "[Root.GetName]: Triggered gain_great_power_status"
	if = {
		limit = {
			NOT = { has_country_flag = became_great_power_flag }
		}
		set_country_flag = became_great_power_flag
	}
}

# country
on_lose_great_power_status = {
	#log = "[Root.GetName]: Triggered lose_great_power_status"
}

# province
on_province_religion_converted = {
	#log = "[Root.GetName]: Triggered province_religion_converted"
	owner = {
		change_variable = {
			which = religions_converted
			value = 1
		}
	}
    
    on_province_religion_converted_estate_privileges_effect = yes
}

# province
on_province_culture_converted = {
	#log = "[Root.GetName]: Triggered province_culture_converted"
	owner = {
		change_variable = {
			which = cultures_converted
			value = 1
		}
	}
}

# THIS = Province, FROM = Country who Propogated
on_convert_by_trade_policy = {
	#log = "[Root.GetName]: Triggered convert_by_trade_policy"
}

# province
# FROM = old owner
on_province_owner_change = {
	#log = "[Root.GetName]: Triggered province_owner_change"
	owner = {
		change_variable = {
			which = provinces_gained
			value = 1
		}
		
	}
	if = {
		limit = {
			FROM = { was_faction_leaders_war = yes }
		}
		FROM = { 
			overlord = {
				reverse_add_opinion = {
					who = PREV
					modifier = province_is_lost
				}
			}
		}
	}
}

# country
on_parliament_debate_failed = {
	#log = "[Root.GetName]: Triggered parliament_debate_failed"
}

# country
on_parliament_debate_succeeded = {
	#log = "[Root.GetName]: Triggered parliament_debate_succeeded"
}

# country
on_russian_sudebnik = {
	#log = "[Root.GetName]: Triggered russian_sudebnik"

}

# country
on_russian_oprichnina = {
	#log = "[Root.GetName]: Triggered russian_oprichnina"

}

# country
on_russian_streltsy = {
	#log = "[Root.GetName]: Triggered russian_streltsy"

}

# province
on_consecrate_patriarch = {
	#log = "[Root.GetName]: Triggered consecrate_patriarch"
}

# country. from = overlord
on_accept_tribute = {
	#log = "[Root.GetName]: Triggered accept_tribute"
}

# country. from = overlord
on_refuse_tribute = {
	#log = "[Root.GetName]: Triggered refuse_tribute"
}

# country
on_leader_recruited = {
	#log = "[Root.GetName]: Triggered leader_recruited"
}

# country
on_general_recruited = {
	#log = "[Root.GetName]: Triggered general_recruited"
	add_army_professionalism = 0.02
}

# country
on_admiral_recruited = {
	#log = "[Root.GetName]: Triggered admiral_recruited"
}

# country
on_conquistador_recruited = {
	#log = "[Root.GetName]: Triggered conquistador_recruited"
}

# country
on_explorer_recruited = {
	#log = "[Root.GetName]: Triggered explorer_recruited"
}

# THIS = Province, FROM = Country
on_regiment_recruited = {

}

# THIS = Province, FROM = Country
on_mercenary_recruited = {
	#log = "[Root.GetName]: Triggered mercenary_recruited"
	FROM = {
		add_army_professionalism = -0.0015
	}
}

# THIS = One province in the state
on_add_pasha = {
	#log = "[Root.GetName]: Triggered add_pasha"
}

# THIS = One province in the state
on_remove_pasha = {
	#log = "[Root.GetName]: Triggered remove_pasha"
	hidden_effect = {
		owner = {
			save_event_target_as = province_owner
		}
		remove_province_modifier = pasha_removed_modifier
	}

	area = {
		limit = { owned_by = event_target:province_owner }
		add_or_extend_province_modifier_effect = { MODIFIER = pasha_removed_modifier DURATION = 3650 }
	}
}

# THIS = Province
on_janissaries_raised = {
	#log = "[Root.GetName]: Triggered janissaries_raised"
}

on_reform_enacted = {
	#log = "[Root.GetName]: Triggered reform_enacted"
}

on_reform_changed = {
	#log = "[Root.GetName]: Triggered reform_changed"
}

on_trade_company_investment = {
	#log = "[Root.GetName]: Triggered trade_company_investment"
}

on_center_of_trade_upgrade = {
	#log = "[Root.GetName]: Triggered center_of_trade_upgrade"
	owner = { change_variable = {
		which = cot_upgraded
		value = 1
	} }
}

on_center_of_trade_downgrade = {
	#log = "[Root.GetName]: Triggered center_of_trade_downgrade"

}

on_culture_promoted = {
	#log = "[Root.GetName]: Triggered culture_promoted"
	change_variable = {
		which = cultures_promoted
		value = 1
	}
}

# FROM = Previous Country, ROOT = Province
on_company_chartered = {
	#log = "[Root.GetName]: Triggered company_chartered"
}

# ROOT = Overlord, FROM = Minor
on_dependency_gained = {
	#log = "[Root.GetName]: Triggered dependency_gained"
	events = {
	}
}

# ROOT = Overlord, FROM = Minor
on_dependency_lost = {
	#log = "[Root.GetName]: Triggered dependency_lost"

}

# ROOT = New vassal, FROM = Overlord
on_create_vassal = {
	#log = "[Root.GetName]: Triggered create_vassal"
}

# ROOT = Country establishing it
# First province in state is set
on_holy_order_established = {
	#log = "[Root.GetName]: Triggered holy_order_established"

}

# When a minority is expelled to a colony
# THIS = Colony, ROOT = Colony, FROM = Home province
on_minority_expelled = {
	#log = "[Root.GetName]: Triggered minority_expelled"

}

# THIS = Raiding country, FROM = Sea province
on_raid_coast = {
	#log = "[Root.GetName]: Triggered raid_coast"
	if = {
		limit = {
			has_faction = pr_buccaneers
		}
		add_faction_influence = {
			faction = pr_buccaneers
			influence = 1
		}
	}
}

# ROOT = Tag that captured the flagship, FROM = Tag that lost the flagship
on_flagship_captured = {
	#log = "[Root.GetName]: Triggered flagship_captured"
	FROM = {
		set_country_flag = captured_flagship_country_flag
	}
	ROOT = {
		country_event = { id = flagship_events.2 }
		set_country_flag = trophy_hunter_flag
	}
	FROM = {
		country_event = { id = flagship_events.1 }
	}
}

# ROOT = Tag that destroyed the flagship, FROM = Tag that lost the flagship
on_flagship_destroyed = {
	#log = "[Root.GetName]: Triggered flagship_destroyed"
	FROM = {
		set_country_flag = sunk_flagship_country_flag
	}
	ROOT = {
		country_event = { id = flagship_events.4 }
	}
	FROM = {
		country_event = { id = flagship_events.3 }
	}
}

# this = Released country, FROM = Releasing country
on_country_released = {
	#log = "[Root.GetName]: Triggered country_released"
}

# ROOT = province, FROM = country
on_trade_good_changed = {
	#log = "[Root.GetName]: Triggered trade_good_changed"

	hidden_effect = {
		if = {
			limit = {
				trade_goods = wine
			}
			remove_province_modifier = grain_bonus_prod
			add_province_modifier = { 
				name = wine_bonus_prod
				duration = -1
				hidden = yes
			}
		}
		if = {
			limit = {
				trade_goods = grain
			}
			remove_province_modifier = wine_bonus_prod
			add_province_modifier = { 
				name = grain_bonus_prod
				duration = -1
				hidden = yes
			}
		}
	}
}

# this = country
on_loan_repaid = {
	#log = "[Root.GetName]: Triggered loan_repaid"

    on_loan_repaid_estate_privileges_effect = yes
}

# this = country
on_rebels_break_country = {
	#log = "[Root.GetName]: Triggered rebels_break_country"
	add_country_modifier = {
		name = just_lost_to_rebels
		duration = 10
		hidden = yes
	}
}

# this = country
## Fires when you fire or replace your ADM advisor, in the moment before they are actually removed from their post.
## Note: Defining a new advisor here will result in the shortest appointment in history. Use on_post_adm_advisor_fired instead :)
on_pre_adm_advisor_fired = {
	#log = "[Root.GetName]: Triggered pre_adm_advisor_fired"
	if = {
		limit = {
			has_country_flag = need_to_fire_adm_advisor
		}
		set_country_flag = just_fired_adm_advisor
		remove_advisor_by_category_no_action = ADM
	}
}

# this = country
on_pre_dip_advisor_fired = {
	#log = "[Root.GetName]: Triggered pre_dip_advisor_fired"
	if = {
		limit = {
			has_country_flag = need_to_fire_dip_advisor
		}
		set_country_flag = just_fired_dip_advisor
		remove_advisor_by_category_no_action = DIP
	}
}

# this = country
on_pre_mil_advisor_fired = {
	#log = "[Root.GetName]: Triggered pre_mil_advisor_fired"
	if = {
		limit = {
			has_country_flag = need_to_fire_mil_advisor
		}
		set_country_flag = just_fired_mil_advisor
		remove_advisor_by_category_no_action = MIL
	}
}

# this = country
on_post_adm_advisor_fired = {
	#log = "[Root.GetName]: Triggered post_adm_advisor_fired"

}

# this = country
on_post_dip_advisor_fired = {
	#log = "[Root.GetName]: Triggered post_dip_advisor_fired"
	
}

# this = country
on_post_mil_advisor_fired = {
	#log = "[Root.GetName]: Triggered post_mil_advisor_fired"
	
}

# this = new client state, from = parent country
on_create_client_state = {
	#log = "[Root.GetName]: Triggered create_client_state"
	if = {
		limit = {
			has_dlc = "Emperor"
			FROM = {
				is_revolutionary = yes
			}
			government = republic
		}
		add_government_reform = junior_revolutionary_republic_reform
		set_country_flag = had_revolution
	}
}

# this = new target, from = previous target (both can be non-existent tag)
on_change_revolution_target = {
	#log = "[Root.GetName]: Triggered change_revolution_target"
}

# this = curia controller (enactor of the bull)
on_golden_bull_enacted = {
	#log = "[Root.GetName]: Triggered golden_bull_enacted"
	set_country_flag = enacted_golden_bull
}


# province:  spawned whenever a new owner takes over the province
# FROM = The previous owner.
on_conquest = {
	#log = "[Root.GetName]: Triggered conquest"
	remove_named_unrest = estate_land_seized
}

on_country_creation = {
	#log = "[Root.GetName]: Triggered country_creation"
}

on_emperor_elected = {
	#log = "[Root.GetName]: Triggered emperor_elected"
	every_elector = {
		if = {
			limit = {
				preferred_emperor = root
			}
			change_variable = {
				which = supported_successive_emperors
				value = 1
			}
		}
		else = {
			set_variable = {
				which = supported_successive_emperors
				value = 0
			}
		}
	}

	emperor = {
		save_global_event_target_as = Emperor
	}
	FROM = {
		if = {
			limit = { has_country_modifier = diet_occupied }
			remove_country_modifier = diet_occupied
			ROOT = {
				add_country_modifier = { name = diet_occupied duration = -1 }
			}
		}
		if = {
			limit = {
				any_country = {
					reverse_has_opinion_modifier = {
						modifier = opinion_imperial_diplomacy
						who = prev
					}
				}
			}
			every_country = {
				limit = {
					reverse_has_opinion_modifier = {
						modifier = opinion_imperial_diplomacy
						who = prev
					}
				}
				reverse_remove_opinion = {
					modifier = opinion_imperial_diplomacy
					who = prev
				}
				ROOT = {
					add_opinion = {
						modifier = opinion_imperial_diplomacy
						who = prev
					}
				}
			}
		}
	}
}